---
// FÄ±ndÄ±k FiyatlarÄ± sayfasÄ±
import Sidebar from "./Sidebar.astro";
---

<div class="min-h-screen bg-gray-50">
  <Sidebar currentPage="prices" />

  <!-- Main content -->
  <div class="lg:pl-64">
    <!-- Header -->
    <header class="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-30">
      <div class="flex h-16 items-center justify-between px-4 lg:px-6">
        <div class="flex items-center space-x-4">
          <button id="mobileSidebarToggle" class="lg:hidden p-2 rounded-md text-gray-400 hover:text-gray-600 hover:bg-gray-100">
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
          </button>
          <div>
            <h1 class="text-xl lg:text-2xl font-semibold text-gray-900">FÄ±ndÄ±k FiyatlarÄ±</h1>
            <p class="text-sm text-gray-600">GÃ¼ncel fÄ±ndÄ±k fiyatlarÄ± ve borsa bilgileri</p>
          </div>
        </div>
        <div class="flex items-center space-x-4">
          <!-- Add Price Button (Admin only) -->
          <button 
            id="addPriceBtn"
            class="hidden bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors"
          >
            <svg class="h-4 w-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            Fiyat Ekle
          </button>
        </div>
      </div>
    </header>

    <!-- Prices content -->
    <main class="p-4 lg:p-6">
      <!-- Market Overview -->
      <div class="mb-8">
        <div class="bg-gradient-to-r from-green-600 to-emerald-600 rounded-2xl p-6 text-white">
          <div class="flex items-center justify-between">
            <div>
              <h2 class="text-2xl font-bold mb-2">ðŸ“ˆ FÄ±ndÄ±k BorsasÄ±</h2>
              <p class="text-green-100">GÃ¼ncel fÄ±ndÄ±k fiyatlarÄ± ve piyasa durumu</p>
            </div>
            <div class="hidden lg:block">
              <svg class="h-24 w-24 text-green-200" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
              </svg>
            </div>
          </div>
        </div>
      </div>

      <!-- Price History Chart -->
      <div class="bg-white rounded-xl shadow-sm border border-gray-200 mb-8">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-semibold text-gray-900">Fiyat GeÃ§miÅŸi (Son 7 GÃ¼n)</h3>
        </div>
        <div class="p-6">
          <div class="h-80">
            <canvas id="priceChart" width="400" height="200"></canvas>
          </div>
        </div>
      </div>

      <!-- Recent Price Updates -->
      <div class="bg-white rounded-xl shadow-sm border border-gray-200">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-semibold text-gray-900">Son Fiyat GÃ¼ncellemeleri</h3>
        </div>
        <div class="p-6">
          <div class="flow-root">
            <ul class="-mb-8" id="priceHistoryList">
              <!-- Fiyat geÃ§miÅŸi dinamik olarak yÃ¼klenecek -->
              <li class="text-center text-gray-500 py-4">
                <p>Fiyat geÃ§miÅŸi yÃ¼kleniyor...</p>
              </li>
            </ul>
          </div>
        </div>
      </div>
    </main>
  </div>
</div>

<!-- Add Price Modal -->
<div id="addPriceModal" class="fixed inset-0 z-50 hidden">
  <div class="fixed inset-0 bg-gray-600 bg-opacity-75"></div>
  <div class="fixed inset-0 z-10 overflow-y-auto">
    <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
      <div class="relative transform overflow-hidden rounded-lg bg-white px-4 pb-4 pt-5 text-left shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6">
        <div class="absolute right-0 top-0 pr-4 pt-4">
          <button id="closeModal" class="rounded-md bg-white text-gray-400 hover:text-gray-600">
            <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div class="sm:flex sm:items-start">
          <div class="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-blue-100 sm:mx-0 sm:h-10 sm:w-10">
            <svg class="h-6 w-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
            </svg>
          </div>
          <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left w-full">
            <h3 class="text-lg font-semibold leading-6 text-gray-900 mb-4">Yeni Fiyat Ekle</h3>
            <form id="addPriceForm" class="space-y-4">
              <div>
                <label for="priceValue" class="block text-sm font-medium text-gray-700 mb-1">FÄ±ndÄ±k FiyatÄ± (â‚º/kg)</label>
                <input type="number" id="priceValue" name="priceValue" step="0.01" min="0" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" placeholder="85.50">
              </div>
            </form>
          </div>
        </div>
        <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
          <button id="savePriceBtn" type="button" class="inline-flex w-full justify-center rounded-lg bg-blue-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-blue-500 sm:ml-3 sm:w-auto">
            Fiyat Ekle
          </button>
          <button id="cancelPriceBtn" type="button" class="mt-3 inline-flex w-full justify-center rounded-lg bg-white px-3 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto">
            Ä°ptal
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { Chart, registerables } from 'chart.js';
  Chart.register(...registerables);

  let priceChart = null;

  // Modal functionality
  const addPriceBtn = document.getElementById('addPriceBtn') as HTMLButtonElement;
  const addPriceModal = document.getElementById('addPriceModal') as HTMLDivElement;
  const closeModal = document.getElementById('closeModal') as HTMLButtonElement;
  const cancelPriceBtn = document.getElementById('cancelPriceBtn') as HTMLButtonElement;
  const addPriceForm = document.getElementById('addPriceForm') as HTMLFormElement;
  const savePriceBtn = document.getElementById('savePriceBtn') as HTMLButtonElement;

  function openModal() {
    addPriceModal.classList.remove('hidden');
  }

  function closeModalFunc() {
    addPriceModal.classList.add('hidden');
    addPriceForm.reset();
  }

  addPriceBtn.addEventListener('click', openModal);
  closeModal.addEventListener('click', closeModalFunc);
  cancelPriceBtn.addEventListener('click', closeModalFunc);

  // Save price functionality
  savePriceBtn.addEventListener('click', async function() {
    const formData = new FormData(addPriceForm);
    const priceData = {
      value: parseFloat(formData.get('priceValue') as string),
      note: formData.get('priceNote') as string
    };

    try {
      const response = await fetch('/api/prices/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(priceData)
      });

      const result = await response.json();

      if (result.success) {
        alert('Fiyat baÅŸarÄ±yla eklendi!');
        closeModalFunc();
        // SayfayÄ± yenile
        window.location.reload();
      } else {
        alert('Fiyat eklenirken hata oluÅŸtu: ' + result.error);
      }
    } catch (error) {
      console.error('Fiyat ekleme hatasÄ±:', error);
      alert('BaÄŸlantÄ± hatasÄ±.');
    }
  });

  // Check user role and show/hide admin features
  async function checkUserRole() {
    try {
      const response = await fetch('/api/auth/me');
      const result = await response.json();
      
      if (result.success && result.user.role === 'admin') {
        addPriceBtn.classList.remove('hidden');
      }
    } catch (error) {
      console.error('KullanÄ±cÄ± rolÃ¼ kontrol hatasÄ±:', error);
    }
  }

  // Fiyat grafiÄŸi oluÅŸtur
  function createPriceChart(prices) {
    const ctx = document.getElementById('priceChart') as HTMLCanvasElement;
    if (!ctx) return;

    // Mevcut grafiÄŸi temizle
    if (priceChart) {
      priceChart.destroy();
    }

    // Son 7 gÃ¼nlÃ¼k veriyi al
    const last7Days = prices.slice(0, 7).reverse();
    
    const labels = last7Days.map(price => {
      const date = new Date(price.created);
      return date.toLocaleDateString('tr-TR', { 
        day: '2-digit', 
        month: '2-digit' 
      });
    });
    
    const data = last7Days.map(price => price.price);

    priceChart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: labels,
        datasets: [{
          label: 'FÄ±ndÄ±k FiyatÄ± (â‚º/kg)',
          data: data,
          borderColor: 'rgb(59, 130, 246)',
          backgroundColor: 'rgba(59, 130, 246, 0.1)',
          borderWidth: 3,
          fill: true,
          tension: 0.4,
          pointBackgroundColor: 'rgb(59, 130, 246)',
          pointBorderColor: '#fff',
          pointBorderWidth: 2,
          pointRadius: 6,
          pointHoverRadius: 8
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            backgroundColor: 'rgba(0, 0, 0, 0.8)',
            titleColor: '#fff',
            bodyColor: '#fff',
            borderColor: 'rgb(59, 130, 246)',
            borderWidth: 1,
            cornerRadius: 8,
            displayColors: false,
            callbacks: {
              label: function(context) {
                return `â‚º${context.parsed.y} / kg`;
              }
            }
          }
        },
        scales: {
          x: {
            grid: {
              display: false
            },
            ticks: {
              color: '#6b7280',
              font: {
                size: 12
              }
            }
          },
          y: {
            beginAtZero: false,
            grid: {
              color: 'rgba(0, 0, 0, 0.1)'
            },
            ticks: {
              color: '#6b7280',
              font: {
                size: 12
              },
              callback: function(value) {
                return 'â‚º' + value;
              }
            }
          }
        },
        interaction: {
          intersect: false,
          mode: 'index'
        }
      }
    });
  }

  // Load prices from API
  async function loadPrices() {
    try {
      const response = await fetch('/api/prices');
      const result = await response.json();
      
      if (result.success && result.prices.length > 0) {
        const prices = result.prices;
        
        // Fiyat grafiÄŸini oluÅŸtur
        createPriceChart(prices);
        
        // Fiyat geÃ§miÅŸini gÃ¶ster
        updatePriceHistory(prices.slice(0, 10)); // Son 10 fiyat
      } else {
        // Veri yoksa boÅŸ grafik gÃ¶ster
        createEmptyChart();
      }
    } catch (error) {
      console.error('Fiyat yÃ¼kleme hatasÄ±:', error);
      createEmptyChart();
    }
  }

  // BoÅŸ grafik oluÅŸtur
  function createEmptyChart() {
    const ctx = document.getElementById('priceChart') as HTMLCanvasElement;
    if (!ctx) return;

    if (priceChart) {
      priceChart.destroy();
    }

    priceChart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: [],
        datasets: [{
          label: 'FÄ±ndÄ±k FiyatÄ± (â‚º/kg)',
          data: [],
          borderColor: 'rgb(59, 130, 246)',
          backgroundColor: 'rgba(59, 130, 246, 0.1)',
          borderWidth: 3,
          fill: true,
          tension: 0.4
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          }
        },
        scales: {
          x: {
            display: false
          },
          y: {
            display: false
          }
        }
      }
    });

    // BoÅŸ mesaj gÃ¶ster
    const chartContainer = ctx.parentElement;
    const emptyMessage = document.createElement('div');
    emptyMessage.className = 'absolute inset-0 flex items-center justify-center text-gray-500';
    emptyMessage.innerHTML = `
      <div class="text-center">
        <svg class="h-16 w-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
        </svg>
        <p>HenÃ¼z fiyat verisi bulunmuyor</p>
      </div>
    `;
    chartContainer.style.position = 'relative';
    chartContainer.appendChild(emptyMessage);
  }

  // Fiyat geÃ§miÅŸini gÃ¼ncelle
  function updatePriceHistory(prices) {
    const historyList = document.getElementById('priceHistoryList');
    if (!historyList) return;
    
    if (prices.length === 0) {
      historyList.innerHTML = '<li class="text-center text-gray-500 py-4"><p>HenÃ¼z fiyat kaydÄ± yok</p></li>';
      return;
    }
    
    let historyHTML = '';
    
    prices.forEach((price, index) => {
      const date = new Date(price.created);
      const timeAgo = getTimeAgo(date);
      
      historyHTML += `
        <li>
          <div class="relative ${index < prices.length - 1 ? 'pb-8' : ''}">
            ${index < prices.length - 1 ? '<span class="absolute top-4 left-4 -ml-px h-full w-0.5 bg-gray-200" aria-hidden="true"></span>' : ''}
            <div class="relative flex space-x-3">
              <div>
                <span class="h-8 w-8 rounded-full bg-blue-500 flex items-center justify-center ring-8 ring-white">
                  <svg class="h-4 w-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                  </svg>
                </span>
              </div>
              <div class="min-w-0 flex-1 pt-1.5 flex justify-between space-x-4">
                <div>
                  <p class="text-sm text-gray-500">FÄ±ndÄ±k fiyatÄ± gÃ¼ncellendi</p>
                  <p class="text-xs text-gray-400">â‚º${price.price} / kg</p>
                </div>
                <div class="text-right text-sm whitespace-nowrap text-gray-500">
                  <time datetime="${date.toISOString()}">${timeAgo}</time>
                </div>
              </div>
            </div>
          </div>
        </li>
      `;
    });
    
    historyList.innerHTML = historyHTML;
  }

  // Zaman Ã¶nce hesaplama
  function getTimeAgo(date) {
    const now = new Date();
    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);
    
    if (diffInSeconds < 60) return 'Az Ã¶nce';
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} dakika Ã¶nce`;
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} saat Ã¶nce`;
    return `${Math.floor(diffInSeconds / 86400)} gÃ¼n Ã¶nce`;
  }

  // Initialize
  checkUserRole();
  loadPrices();
</script>
