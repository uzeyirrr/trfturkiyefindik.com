---
import DashboardLayout from "../../layouts/DashboardLayout.astro";
import DeliveriesContent from "../../components/dashboard/DeliveriesLayout.astro";
import { auth } from "../../lib/pocketbase.js";

// Kullanıcının giriş yapmış olup olmadığını kontrol et
const currentUser = auth.getCurrentUser();

// Eğer kullanıcı giriş yapmamışsa login sayfasına yönlendir
if (!currentUser) {
  return Astro.redirect('/login');
}
---

<DashboardLayout>
  <DeliveriesContent>
  <!-- Teslimat Formu -->
  <div class="bg-white rounded-xl shadow-sm border border-gray-200 mb-6">
    <div class="px-6 py-4 border-b border-gray-200">
      <h3 class="text-lg font-semibold text-gray-900">Yeni Teslimat Oluştur</h3>
      <p class="text-sm text-gray-600">Teslimat bilgilerini girerek QR kodlu fiş oluşturun</p>
    </div>
    <div class="p-6">
      <form id="deliveryForm" class="space-y-6">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <!-- Tahmini Fındık Kilosu -->
          <div>
            <label for="kg" class="block text-sm font-medium text-gray-700 mb-2">
              Tahmini Fındık Kilosu (kg)
            </label>
            <input
              type="number"
              id="kg"
              name="kg"
              step="0.01"
              min="0"
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
              placeholder="Örn: 100.5"
            />
          </div>

          <!-- Teslimat Tarihi -->
          <div>
            <label for="teslimat_tarihi" class="block text-sm font-medium text-gray-700 mb-2">
              Teslimat Tarihi
            </label>
            <input
              type="date"
              id="teslimat_tarihi"
              name="teslimat_tarihi"
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
            />
          </div>

          <!-- Fabrika Seçimi -->
          <div>
            <label for="factory" class="block text-sm font-medium text-gray-700 mb-2">
              Teslimat Fabrikası
            </label>
            <select
              id="factory"
              name="factory"
              required
              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
            >
              <option value="">Fabrika seçin</option>
            </select>
          </div>
        </div>

        <!-- Submit Button -->
        <div class="flex justify-end">
          <button
            type="submit"
            class="px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 focus:ring-4 focus:ring-blue-200 transition-all duration-200 flex items-center space-x-2"
          >
            <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            <span>Teslimat Fişi Oluştur</span>
          </button>
        </div>
      </form>
    </div>
  </div>

  <!-- Teslimat Listesi -->
  <div class="bg-white rounded-xl shadow-sm border border-gray-200">
    <div class="px-6 py-4 border-b border-gray-200">
      <h3 class="text-lg font-semibold text-gray-900">Teslimat Geçmişi</h3>
      <p class="text-sm text-gray-600">Oluşturduğunuz teslimat fişleri</p>
    </div>
    <div class="p-6">
      <div id="deliveriesList" class="space-y-4">
        <!-- Teslimatlar buraya yüklenecek -->
        <div class="text-center py-8">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
          <p class="text-gray-500 mt-2">Teslimatlar yükleniyor...</p>
        </div>
      </div>
    </div>
  </div>
  </DeliveriesContent>
</DashboardLayout>

<script>
     // Global kullanıcı bilgisi
   let currentUser = null;

   // Sayfa yüklendiğinde çalışacak kodlar
   document.addEventListener('DOMContentLoaded', async function() {
     await loadUserInfo();
     await loadFactories();
     await loadDeliveries();
     setupFormHandling();
     setupDateValidation();
   });

   // Kullanıcı bilgilerini yükle
   async function loadUserInfo() {
     try {
       const response = await fetch('/api/auth/me');
       const result = await response.json();
       
       if (result.success) {
         currentUser = result.user;
       } else {
         console.error('Kullanıcı bilgisi alınamadı:', result.error);
       }
     } catch (error) {
       console.error('Kullanıcı bilgisi yükleme hatası:', error);
     }
   }

  // Fabrikaları yükle
  async function loadFactories() {
    try {
      const response = await fetch('/api/factories');
      const result = await response.json();
      
      if (result.success) {
        const factorySelect = document.getElementById('factory');
        factorySelect.innerHTML = '<option value="">Fabrika seçin</option>';
        
        result.factories.forEach(factory => {
          const option = document.createElement('option');
          option.value = factory.id;
          option.textContent = factory.name;
          factorySelect.appendChild(option);
        });
      } else {
        console.error('Fabrika yükleme hatası:', result.error);
      }
    } catch (error) {
      console.error('Fabrika yükleme hatası:', error);
    }
  }

  // Teslimatları yükle
  async function loadDeliveries() {
    try {
      const response = await fetch('/api/deliveries');
      const result = await response.json();
      
      const deliveriesList = document.getElementById('deliveriesList');
      
      if (result.success) {
        if (result.deliveries.length === 0) {
          deliveriesList.innerHTML = `
            <div class="text-center py-8">
              <svg class="h-12 w-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
              </svg>
              <p class="text-gray-500">Henüz teslimat oluşturmadınız</p>
              <p class="text-sm text-gray-400">İlk teslimatınızı oluşturmak için yukarıdaki formu kullanın</p>
            </div>
          `;
        } else {
          deliveriesList.innerHTML = result.deliveries.map(delivery => `
            <div class="bg-gray-50 rounded-lg p-4 border border-gray-200 hover:shadow-sm transition-shadow">
              <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                  <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                    <svg class="h-6 w-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                    </svg>
                  </div>
                  <div>
                    <h4 class="font-medium text-gray-900">Teslimat #${delivery.id.slice(-8)}</h4>
                    <p class="text-sm text-gray-600">${delivery.kg} kg • ${new Date(delivery.teslimat_tarihi).toLocaleDateString('tr-TR')}</p>
                    <p class="text-xs text-gray-500">Fiyat: ₺${delivery.factory_price}/kg</p>
                  </div>
                </div>
                <div class="flex items-center space-x-2">
                  <span class="px-2 py-1 text-xs rounded-full ${
                    delivery.tamamlandi 
                      ? 'bg-green-100 text-green-800' 
                      : 'bg-yellow-100 text-yellow-800'
                  }">
                    ${delivery.tamamlandi ? 'Tamamlandı' : 'Beklemede'}
                  </span>
                  <button 
                    onclick="showDeliveryReceipt('${delivery.id}')"
                    class="px-3 py-1 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    Fişi Görüntüle
                  </button>
                </div>
              </div>
            </div>
          `).join('');
        }
      } else {
        deliveriesList.innerHTML = `
          <div class="text-center py-8">
            <p class="text-red-500">Teslimatlar yüklenirken hata oluştu</p>
          </div>
        `;
      }
    } catch (error) {
      console.error('Teslimat yükleme hatası:', error);
      document.getElementById('deliveriesList').innerHTML = `
        <div class="text-center py-8">
          <p class="text-red-500">Bağlantı hatası</p>
        </div>
      `;
    }
  }

  // Form işleme
  function setupFormHandling() {
    const form = document.getElementById('deliveryForm') as HTMLFormElement;
    
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = new FormData(form);
      const data = {
        kg: formData.get('kg'),
        teslimat_tarihi: formData.get('teslimat_tarihi'),
        factory: formData.get('factory')
      };

      const submitBtn = form.querySelector('button[type="submit"]') as HTMLButtonElement;
      const originalText = submitBtn.innerHTML;
      
      // Loading durumu
      submitBtn.disabled = true;
      submitBtn.innerHTML = `
        <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-white mx-auto"></div>
        <span>Oluşturuluyor...</span>
      `;

      try {
        const response = await fetch('/api/deliveries', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data)
        });

        const result = await response.json();

        if (result.success) {
          // Başarılı - fişi göster
          showDeliveryReceipt(result.delivery.id);
          form.reset();
          await loadDeliveries(); // Listeyi yenile
        } else {
          alert('Hata: ' + result.error);
        }
      } catch (error) {
        console.error('Teslimat oluşturma hatası:', error);
        alert('Bağlantı hatası oluştu');
      } finally {
        // Loading durumunu kaldır
        submitBtn.disabled = false;
        submitBtn.innerHTML = originalText;
      }
    });
  }

  // Teslimat fişini göster
  async function showDeliveryReceipt(deliveryId) {
    // Modal oluştur
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50';
    modal.innerHTML = `
      <div class="bg-white rounded-xl shadow-2xl max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto">
        <div class="p-6">
          <div class="text-center mb-6">
            <h3 class="text-xl font-bold text-gray-900 mb-2">Teslimat Fişi</h3>
            <p class="text-sm text-gray-600">ID: ${deliveryId}</p>
          </div>
          
          <div class="bg-gray-50 rounded-lg p-4 mb-6">
            <div class="text-center">
              <div id="qrCode" class="mx-auto mb-4"></div>
              <p class="text-xs text-gray-500">QR kodu tarayarak teslimat detaylarını görüntüleyin</p>
            </div>
          </div>
          
          <div class="space-y-3 mb-6">
            <div class="flex justify-between">
              <span class="text-gray-600">Teslimat ID:</span>
              <span class="font-medium">${deliveryId.slice(-8)}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Tarih:</span>
              <span class="font-medium">${new Date().toLocaleDateString('tr-TR')}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600">Durum:</span>
              <span class="px-2 py-1 text-xs rounded-full bg-yellow-100 text-yellow-800">Beklemede</span>
            </div>
                         <div class="flex justify-between">
               <span class="text-gray-600">Üretici:</span>
               <span class="font-medium" id="userName">${currentUser ? (currentUser.name || 'Bilinmeyen Kullanıcı') : 'Bilinmeyen Kullanıcı'}</span>
             </div>
          </div>
          
          <div class="flex space-x-3">
            <button 
              onclick="printReceipt()"
              class="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              Yazdır
            </button>
            <button 
              onclick="closeModal()"
              class="flex-1 px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors"
            >
              Kapat
            </button>
          </div>
        </div>
      </div>
    `;

         document.body.appendChild(modal);
     
     // QR kod oluştur
    try {
      const QRCode = await import('qrcode');
      const qrContainer = document.getElementById('qrCode');
      
      // QR kod için veri oluştur - teslimat detay sayfasına yönlendir
      const qrData = `${window.location.origin}/delivery/${deliveryId}`;
      
      const qrCanvas = await QRCode.toCanvas(qrData, {
        width: 128,
        margin: 2,
        color: {
          dark: '#000000',
          light: '#FFFFFF'
        }
      });
      
      qrContainer.innerHTML = '';
      qrContainer.appendChild(qrCanvas);
    } catch (error) {
      console.error('QR kod oluşturma hatası:', error);
      const qrContainer = document.getElementById('qrCode');
      qrContainer.innerHTML = `
        <div class="w-32 h-32 bg-gray-200 rounded-lg flex items-center justify-center mx-auto">
          <div class="text-center">
            <div class="text-4xl mb-2">📱</div>
            <div class="text-xs text-gray-500">QR Kod</div>
          </div>
        </div>
      `;
    }
  }

  // Modal kapat
  function closeModal() {
    const modal = document.querySelector('.fixed.inset-0.z-50');
    if (modal) {
      modal.remove();
    }
  }

  // Tarih validasyonu
  function setupDateValidation() {
    const dateInput = document.getElementById('teslimat_tarihi') as HTMLInputElement;
    if (dateInput) {
      // Bugünden önceki tarihleri seçmeyi engelle
      const today = new Date().toISOString().split('T')[0];
      dateInput.min = today;
    }
  }

  // Fiş yazdır
  function printReceipt() {
    window.print();
  }

  // Global fonksiyonlar
  (window as any).showDeliveryReceipt = showDeliveryReceipt;
  (window as any).closeModal = closeModal;
  (window as any).printReceipt = printReceipt;
</script>
